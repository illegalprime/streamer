
var IMG_BASE64 = "/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wgARCAAUABQDAREAAhEBAxEB/8QAGAAAAwEBAAAAAAAAAAAAAAAAAwQHBgj/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIQAxAAAAHCDRGiyllOMAoIUP/EABkQAAMBAQEAAAAAAAAAAAAAAAMEBQYHAv/aAAgBAQABBQLG42XrYOS5kwy5VGoKjzLJMMuUaM/qcZ9BiW4Oq2Kcg+xLcKX2cv8A/8QAFBEBAAAAAAAAAAAAAAAAAAAAMP/aAAgBAwEBPwEf/8QAFBEBAAAAAAAAAAAAAAAAAAAAMP/aAAgBAgEBPwEf/8QAKRAAAQMBCAEDBQAAAAAAAAAAAQIDBBIABRETITFBUVIiofBigZHB8f/aAAgBAQAGPwKY23MU3fyDWlC9EpT+weTxpp5PSL9bVAu6ITmB005mG+vj9X47EhEB1x+GFnKcdTSpQ+fwbWbv2Q8qBd0Q5gdqpzMN9fHs/bvCddt2znI8lldYS56Q6BsSOUe4OGnbsSW0piQ0aVoVxZ2AiQ4mG6sOLZB9KiPnsOhZqXEdUxIaNSFp4stxxanHFmpS1HEk92//xAAeEAEAAgICAwEAAAAAAAAAAAABESEAMUFRYXHBkf/aAAgBAQABPyGBeFYWiiZz2vgxd6Wy7w4ktLCbbwD250gqfandkF6rsrnGWiSNST2YCeoT3UFU8Buhjn8hJfRIRKREzo+mtJT892cHP5CS+iSI0ijj5iqlmVLtXnP/2gAMAwEAAgADAAAAEBJJJJ//xAAUEQEAAAAAAAAAAAAAAAAAAAAw/9oACAEDAQE/EB//xAAUEQEAAAAAAAAAAAAAAAAAAAAw/9oACAECAQE/EB//xAAaEAEAAwEBAQAAAAAAAAAAAAABABEhkTFB/9oACAEBAAE/EArO0WRGR0ICkhcW6SEouAT4gMsJ/wA7ILh8EMAlUHGukBKNAJ5QdrCnZLqhDV3ZQJyTOgMCYBERRBEoBEV/7xANO4QxOFaDQGRMCIiIgCQAiij9Wa5WVBVKqqz/2Q==";

var IMAGE = new Uint8Array([0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46,
    0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00,
    0xff, 0xfe, 0x00, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x47, 0x49, 0x4d, 0x50, 0xff, 0xdb, 0x00,
    0x43, 0x00, 0x03, 0x02, 0x02, 0x03, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03,
    0x04, 0x03, 0x03, 0x04, 0x05, 0x08, 0x05, 0x05, 0x04, 0x04, 0x05, 0x0a,
    0x07, 0x07, 0x06, 0x08, 0x0c, 0x0a, 0x0c, 0x0c, 0x0b, 0x0a, 0x0b, 0x0b,
    0x0d, 0x0e, 0x12, 0x10, 0x0d, 0x0e, 0x11, 0x0e, 0x0b, 0x0b, 0x10, 0x16,
    0x10, 0x11, 0x13, 0x14, 0x15, 0x15, 0x15, 0x0c, 0x0f, 0x17, 0x18, 0x16,
    0x14, 0x18, 0x12, 0x14, 0x15, 0x14, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x03,
    0x04, 0x04, 0x05, 0x04, 0x05, 0x09, 0x05, 0x05, 0x09, 0x14, 0x0d, 0x0b,
    0x0d, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
    0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
    0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
    0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
    0x14, 0x14, 0x14, 0xff, 0xc2, 0x00, 0x11, 0x08, 0x00, 0x14, 0x00, 0x14,
    0x03, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4,
    0x00, 0x18, 0x00, 0x00, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x07, 0x06, 0x08,
    0xff, 0xc4, 0x00, 0x14, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xda,
    0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x10, 0x03, 0x10, 0x00, 0x00, 0x01,
    0xc2, 0x0d, 0x11, 0xa2, 0xca, 0x59, 0x4e, 0x30, 0x0a, 0x08, 0x50, 0xff,
    0xc4, 0x00, 0x19, 0x10, 0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x05, 0x06,
    0x07, 0x02, 0xff, 0xda, 0x00, 0x08, 0x01, 0x01, 0x00, 0x01, 0x05, 0x02,
    0xc6, 0xe3, 0x65, 0xeb, 0x60, 0xe4, 0xb9, 0x93, 0x0c, 0xb9, 0x54, 0x6a,
    0x0a, 0x8f, 0x32, 0xc9, 0x30, 0xcb, 0x94, 0x68, 0xcf, 0xea, 0x71, 0x9f,
    0x41, 0x89, 0x6e, 0x0e, 0xab, 0x62, 0x9c, 0x83, 0xec, 0x4b, 0x70, 0xa5,
    0xf6, 0x72, 0xff, 0x00, 0xff, 0xc4, 0x00, 0x14, 0x11, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0xff, 0xda, 0x00, 0x08, 0x01, 0x03, 0x01, 0x01, 0x3f, 0x01,
    0x1f, 0xff, 0xc4, 0x00, 0x14, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff,
    0xda, 0x00, 0x08, 0x01, 0x02, 0x01, 0x01, 0x3f, 0x01, 0x1f, 0xff, 0xc4,
    0x00, 0x29, 0x10, 0x00, 0x01, 0x03, 0x01, 0x08, 0x01, 0x03, 0x05, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x12,
    0x00, 0x05, 0x11, 0x13, 0x21, 0x31, 0x41, 0x51, 0x52, 0x22, 0xa1, 0xf0,
    0x62, 0x81, 0x91, 0xc1, 0xf1, 0xff, 0xda, 0x00, 0x08, 0x01, 0x01, 0x00,
    0x06, 0x3f, 0x02, 0x98, 0xdb, 0x73, 0x14, 0xdd, 0xfc, 0x83, 0x5a, 0x50,
    0xbd, 0x12, 0x94, 0xfe, 0xc1, 0xe4, 0xf1, 0xa6, 0x9e, 0x4f, 0x48, 0xbf,
    0x5b, 0x54, 0x0b, 0xba, 0x21, 0x39, 0x81, 0xd3, 0x4e, 0x66, 0x1b, 0xeb,
    0xe3, 0xf5, 0x7e, 0x3b, 0x12, 0x11, 0x01, 0xd7, 0x1f, 0x86, 0x16, 0x72,
    0x9c, 0x75, 0x34, 0xa9, 0x43, 0xe7, 0xf0, 0x6d, 0x66, 0xef, 0xd9, 0x0f,
    0x2a, 0x05, 0xdd, 0x10, 0xe6, 0x07, 0x6a, 0xa7, 0x33, 0x0d, 0xf5, 0xf1,
    0xec, 0xfd, 0xbb, 0xc2, 0x75, 0xdb, 0x76, 0xce, 0x72, 0x3c, 0x96, 0x57,
    0x58, 0x4b, 0x9e, 0x90, 0xe8, 0x1b, 0x12, 0x39, 0x47, 0xb8, 0x38, 0x69,
    0xdb, 0xb1, 0x25, 0xb4, 0xa6, 0x24, 0x34, 0x69, 0x5a, 0x15, 0xc5, 0x9d,
    0x80, 0x89, 0x0e, 0x26, 0x1b, 0xab, 0x0e, 0x2d, 0x90, 0x7d, 0x2a, 0x23,
    0xe7, 0xb0, 0xe8, 0x59, 0xa9, 0x71, 0x1d, 0x53, 0x12, 0x1a, 0x35, 0x21,
    0x69, 0xe2, 0xcb, 0x71, 0xc5, 0xa9, 0xc7, 0x16, 0x6a, 0x52, 0xd4, 0x71,
    0x24, 0xf7, 0x6f, 0xff, 0xc4, 0x00, 0x1e, 0x10, 0x01, 0x00, 0x02, 0x02,
    0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x11, 0x21, 0x00, 0x31, 0x41, 0x51, 0x61, 0x71, 0xc1, 0x91, 0xff,
    0xda, 0x00, 0x08, 0x01, 0x01, 0x00, 0x01, 0x3f, 0x21, 0x81, 0x78, 0x56,
    0x16, 0x8a, 0x26, 0x73, 0xda, 0xf8, 0x31, 0x77, 0xa5, 0xb2, 0xef, 0x0e,
    0x24, 0xb4, 0xb0, 0x9b, 0x6f, 0x00, 0xf6, 0xe7, 0x48, 0x2a, 0x7d, 0xa9,
    0xdd, 0x90, 0x5e, 0xab, 0xb2, 0xb9, 0xc6, 0x5a, 0x24, 0x8d, 0x49, 0x3d,
    0x98, 0x09, 0xea, 0x13, 0xdd, 0x41, 0x54, 0xf0, 0x1b, 0xa1, 0x8e, 0x7f,
    0x21, 0x25, 0xf4, 0x48, 0x44, 0xa4, 0x44, 0xce, 0x8f, 0xa6, 0xb4, 0x94,
    0xfc, 0xf7, 0x67, 0x07, 0x3f, 0x90, 0x92, 0xfa, 0x24, 0x88, 0xd2, 0x28,
    0xe3, 0xe6, 0x2a, 0xa5, 0x99, 0x52, 0xed, 0x5e, 0x73, 0xff, 0xda, 0x00,
    0x0c, 0x03, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x12,
    0x49, 0x24, 0x9f, 0xff, 0xc4, 0x00, 0x14, 0x11, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0xff, 0xda, 0x00, 0x08, 0x01, 0x03, 0x01, 0x01, 0x3f, 0x10, 0x1f,
    0xff, 0xc4, 0x00, 0x14, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 0xda,
    0x00, 0x08, 0x01, 0x02, 0x01, 0x01, 0x3f, 0x10, 0x1f, 0xff, 0xc4, 0x00,
    0x1a, 0x10, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x11, 0x21, 0x91, 0x31,
    0x41, 0xff, 0xda, 0x00, 0x08, 0x01, 0x01, 0x00, 0x01, 0x3f, 0x10, 0x0a,
    0xce, 0xd1, 0x64, 0x46, 0x47, 0x42, 0x02, 0x92, 0x17, 0x16, 0xe9, 0x21,
    0x28, 0xb8, 0x04, 0xf8, 0x80, 0xcb, 0x09, 0xff, 0x00, 0x3b, 0x20, 0xb8,
    0x7c, 0x10, 0xc0, 0x25, 0x50, 0x71, 0xae, 0x90, 0x12, 0x8d, 0x00, 0x9e,
    0x50, 0x76, 0xb0, 0xa7, 0x64, 0xba, 0xa1, 0x0d, 0x5d, 0xd9, 0x40, 0x9c,
    0x93, 0x3a, 0x03, 0x02, 0x60, 0x11, 0x11, 0x44, 0x11, 0x28, 0x04, 0x45,
    0x7f, 0xef, 0x10, 0x0d, 0x3b, 0x84, 0x31, 0x38, 0x56, 0x83, 0x40, 0x64,
    0x4c, 0x08, 0x88, 0x88, 0x80, 0x24, 0x00, 0x8a, 0x28, 0xfd, 0x59, 0xae,
    0x56, 0x54, 0x15, 0x4a, 0xaa, 0xac, 0xff, 0xd9]);

var loadB64 = function() {
    var canvas = document.getElementById("video");
    var context = canvas.getContext("2d");
    var image = new Image();
    image.onload = function() {
        context.drawImage(image, 0, 0, canvas.width, canvas.height);
    };
    image.src = "data:image/jpg;base64," + IMG_BASE64;
};

var loadBin = function() {
    var blob = new Blob([IMAGE], {
        type: "image/jpeg",
    });
    var canvas = document.getElementById("video");
    var context = canvas.getContext("2d");
    var url = URL.createObjectURL(blob);
    var image = new Image();
    image.onload = function() {
        context.drawImage(image, 0, 0, canvas.width, canvas.height);
    };
    image.src = url;
};

var defaults = {
    server: "ws://127.0.0.1:9998/",
    canvas: ".streamer-video",
};

var streamers = function(options) {
    var opts = _.extend(defaults, options);
    var protocol = "jpeg-meta";

    var canvases;
    if (_.isString(opts.canvas)) {
        canvases = document.querySelectorAll(opts.canvas);
    } else if (_.isFunction(opts.canvas)) {
        canvases = opts.canvas();
    }
    var contexts = _.map(canvases, function(canvas) {
        return canvas.getContext("2d");
    });

    var conn = new WebSocket(opts.server, protocol);
    conn.binaryType = "blob";

    var jpgToCanvas = function(jpeg, context) {
        var img_url = URL.createObjectURL(jpeg);
        var image = new Image();
        image.onload = function() {
            URL.revokeObjectURL(img_url);
            context.drawImage(image, 0, 0, image.width, image.height);
        };
        image.src = img_url;
    };

    conn.onmessage = function(event) {
        _.each(contexts, jpgToCanvas.bind(undefined, event.data));
    };
};

window.onload = loadBin;
